{"ts":1365310102536,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//h2.SparseArray\n//Hart\n//04/11/13\n\n#include <iostream>\nusing namespace std;\n\nclass SparseArray{\n    public:\n\t\tSparseArray(); // construct an SparseArray with no nonzero elements\n\t\tunsigned get( unsigned long long index ); // return an element from the array\n\t\tSparseArray & set( unsigned long long index, unsigned value ); // set array element to value\n\tprivate:\n\t\tunsigned nonZeroElements;\n\t\tunsigned long long indexArr[20];\n\t\tunsigned valueArr[20];\n}; // SparseArray\n\nbool die( const string & msg );\n\nint main() {\n\tSparseArray a;\n\t\n\tunsigned long long index = 1;\n\tfor( unsigned i = 0; i <= 20; i++, index *= 4 )\n\t\t//cout << index << \" - \" << i << endl, a.set( index, i ), cout << endl;\n\t\ta.set( index, i );\n/*\t\n\tcout << a.get(1099511627776) << endl;\n\tcout << endl;\n*/\t\n\tunsigned total = 0;\n\tindex = 1;\n\tfor( unsigned i = 0; i <= 40; i++, index *= 2 )\n\t\ttotal += a.get(index);\n\tcout <<total;\n/*\t\n\tcout << endl << endl;\n/*\n\tint t = 0;\n\tfor(int i = 0; i <= 20; i++){\n\t\tt += i;\n\t\tcout << t << \" / \" << i << endl;\n\t}\n\t\n\tcout << endl;\n/*\n\ta.set(9999, 1), cout << endl << endl;\n\t\n\ta.set(64, 0).set(16777216, 0);\n\ta.set(16, 33);\n\tcout << a.get(16);\n\t\n\tcout << endl << endl;\n\t\n\ta.set(9871234, 13).set(1, 17);\n\t\n\tcout << endl;\n*/\t\n\treturn 0;\n} //main()\n\nbool die( const string & msg ){\n\t\t//cerr <<endl <<\"Fatal error: \" <<msg <<endl;\n\t\t//exit( EXIT_FAILURE );\n\t\t\n\t\tcout << endl << \"Fatal error: \" << msg << endl;\n} //die( const string & msg )\n\nSparseArray::SparseArray(){\n\tthis->nonZeroElements = 0;\n\tthis->indexArr = {0};\n\tthis->valueArr = {0};\n}\n\nunsigned SparseArray::get( unsigned long long index ){\t\n\tfor (int i = 0; i < 20; i++){\n\t\tif (indexArr[i] == index) return valueArr[i];\n\t}\n\t\n\treturn 0;\n}\n\nSparseArray &SparseArray::set( unsigned long long index, unsigned value ){\n\tif (index > 1e17) die(\"Number is not less than 1e17.\");\n\telse if (nonZeroElements > 20) die(\"There are already 20 nonzero values assigned.\");\n\telse if ((value == 0) && (get(index))){\n\t\tint i = 0;\n\t\tfor (i; i < 20; i++){\n\t\t\tif (indexArr[i] == index) break;\n\t\t}\n\t\t//cout << index << \" / \" << value << \" - \" << i << endl;\n\t\tthis->indexArr[i] = 0;\n\t\tthis->valueArr[i] = 0;\n\t\tif (nonZeroElements != 0) this->nonZeroElements--;\n\t\t//cout << index << \" / \" << value << \" setZero \" << get(index) << endl;\t\t\t\n\t} else {\n\t\tif (get(index)){\n\t\t\tint i = 0;\n\t\t\tfor (i; i < 20; i++){\n\t\t\t\tif (indexArr[i] == index) break;\n\t\t\t}\n\t\t\tthis->valueArr[i] = value;\n\t\t\t//cout << index << \" / \" << value << \" resetValue \" << get(index) << endl;\t\t\t\n\t\t} else if (nonZeroElements >= 20) die(\"There are already 20 nonzero values assigned.\");\n\t\telse {\n\t\t\tint i = 0;\n\t\t\tfor (i; i < 20; i++){\n\t\t\t\tif (valueArr[i] == 0) break; //Edge case, it's possible for indexArr[i] to hold a value while valueArr[i] does not. There fore utilizing valueArr[i] to check for first zero occurrence to set values, keeping arrays parallel.\n\t\t\t}\n\t\t\t//cout << \"NonZeroes - \" << nonZeroElements << \" indexArr[\" << i << \"]\" << endl; //100 000 000 000 000 000\n\t\t\tthis->indexArr[i] = index;\n\t\t\t//cout << index << endl;\n\t\t\tthis->valueArr[i] = value;\n\t\t\t//cout << value << endl; //1 000 000 000 002\n\t\t\tif (get(index)) this->nonZeroElements++;\n\t\t\t//cout << index << \" / \" << value << \" setIndex/Value \" << \"NonZeroes Now = \" << nonZeroElements << \" -- get(index) returns \" << get(index) << endl << endl;\t\t\t\n\t\t}\n\t}\n\t\n\treturn *this;\n}"]],"start1":0,"start2":0,"length1":0,"length2":3354}]],"length":3354}
{"contributors":[],"silentsave":false,"ts":1365310165551,"patch":[[{"diffs":[[0,") {\n"],[-1,"\tSparseArray a;\n\t\n\tunsigned long long index = 1;\n\tfor( unsigned i = 0; i <= 20; i++, index *= 4 )\n\t\t//cout << index << \" - \" << i << endl, a.set( index, i ), cout << endl;\n\t\ta.set( index, i );\n/*\t\n\tcout << a.get(1099511627776) << endl;\n\tcout << endl;\n*/\t\n\tunsigned total = 0;\n\tindex = 1;\n\tfor( unsigned i = 0; i <= 40; i++, index *= 2 )\n\t\ttotal += a.get(index);\n\tcout <<total;\n/*\t\n\tcout << endl << endl;\n/*\n\tint t = 0;\n\tfor(int i = 0; i <= 20; i++){\n\t\tt += i;\n\t\tcout << t << \" / \" << i << endl;\n\t}\n\t\n\tcout << endl;\n/*\n\ta.set(9999, 1), cout << endl << endl;\n\t\n\ta.set(64, 0).set(16777216, 0);\n\ta.set(16, 33);\n\tcout << a.get(16);\n\t\n\tcout << endl << endl;\n\t\n\ta.set(9871234, 13).set(1, 17);\n\t\n\tcout << endl;\n*/\t"],[1,"    "],[0,"\n\tre"]],"start1":526,"start2":526,"length1":714,"length2":12},{"diffs":[[0,"sg ){\n\t\t"],[-1,"//"],[0,"cerr <<e"]],"start1":584,"start2":584,"length1":18,"length2":16},{"diffs":[[0,"endl;\n\t\t"],[-1,"//"],[0,"exit( EX"]],"start1":630,"start2":630,"length1":18,"length2":16},{"diffs":[[0,");\n\t\t\n\t\t"],[1,"//"],[0,"cout << "]],"start1":657,"start2":657,"length1":16,"length2":18}]],"length":2650,"saved":false}
{"contributors":[],"silentsave":false,"ts":1365589491399,"patch":[[{"diffs":[[0,"t. There"],[-1," "],[0,"fore uti"]],"start1":2056,"start2":2056,"length1":17,"length2":16}]],"length":2649,"saved":false}
{"ts":1365589666963,"patch":[[{"diffs":[[0,"ents > 20) die(\""],[1,"Cannot add another value. "],[0,"There are alread"]],"start1":1158,"start2":1158,"length1":32,"length2":58}]],"length":2675,"saved":false}
{"ts":1365589710939,"patch":[[{"diffs":[[0,"0) die(\""],[1,"Cannot add another value. "],[0,"There ar"]],"start1":1860,"start2":1860,"length1":16,"length2":42}]],"length":2701,"saved":false}
{"ts":1365589762567,"patch":[[{"diffs":[[0,"ues,"],[1," this"],[0," keep"],[-1,"ing"],[1,"s"],[0," arr"]],"start1":2188,"start2":2188,"length1":16,"length2":19}]],"length":2704,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366827254153,"patch":[[{"diffs":[[0,"stream>\n"],[1,"#include <string>\n"],[0,"using na"]],"start1":61,"start2":61,"length1":16,"length2":34}]],"length":2722,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366836205790,"patch":[[{"diffs":[[0,"sg ){\n\t\t"],[1,"//"],[0,"cerr <<e"]],"start1":602,"start2":602,"length1":16,"length2":18},{"diffs":[[0,"endl;\n\t\t"],[1,"//"],[0,"exit( EX"]],"start1":650,"start2":650,"length1":16,"length2":18},{"diffs":[[0,");\n\t\t\n\t\t"],[-1,"//"],[0,"cout << "]],"start1":679,"start2":679,"length1":18,"length2":16},{"diffs":[[0,"< msg <<"],[1," endl <<"],[0," endl;\n}"]],"start1":720,"start2":720,"length1":16,"length2":24},{"diffs":[[0,"indexArr"],[-1," = {0};\n"],[1,"[0] = 0;\n\tthis->valueArr[0] = 0;\n//\tthis->indexArr = {0}; //not sure why this works in sourceLair and not on imac or in visual studio\n//"],[0,"\tthis->v"]],"start1":837,"start2":837,"length1":24,"length2":152},{"diffs":[[0,");\n\t"],[-1,"else if (nonZeroElements > 20) die(\"Cannot add another value. There are already 20 nonzero values assigned.\");\n\telse "],[0,""],[1,""],[0,"if ("]],"start1":1290,"start2":1290,"length1":125,"length2":8},{"diffs":[[0,"s--;\n\t\t//cout <<"],[1," \"Found Index to Zero: \" <<"],[0," index << \" / \" "]],"start1":1563,"start2":1563,"length1":32,"length2":59},{"diffs":[[0," << "],[-1,"endl;\t\t\t\n\t} else {\n\t"],[1,"\" -- NonZeroes Now = \" << nonZeroElements << endl;\n\n\t\treturn *this;\n\t}\n"],[0,"\tif "]],"start1":1659,"start2":1659,"length1":28,"length2":79},{"diffs":[[0,"(index)){\n\t\t"],[-1,"\t"],[0,"int i = 0;\n\t"]],"start1":1742,"start2":1742,"length1":25,"length2":24},{"diffs":[[0,"){\n\t\tint i = 0;\n"],[-1,"\t"],[0,"\t\tfor (i; i < 20"]],"start1":1749,"start2":1749,"length1":33,"length2":32},{"diffs":[[0,"0; i++){\n\t\t\t"],[-1,"\t"],[0,"if (indexArr"]],"start1":1780,"start2":1780,"length1":25,"length2":24},{"diffs":[[0,"reak;\n\t\t"],[-1,"\t"],[0,"}\n"],[-1,"\t"],[0,"\t\tthis->"]],"start1":1819,"start2":1819,"length1":20,"length2":18},{"diffs":[[0,"r[i] = value;\n\t\t"],[-1,"\t"],[0,"//cout << index "]],"start1":1844,"start2":1844,"length1":33,"length2":32},{"diffs":[[0,"lue;\n\t\t//cout <<"],[1," \"Found Index to Change: \" <<"],[0," index << \" / \" "]],"start1":1853,"start2":1853,"length1":32,"length2":61},{"diffs":[[0,"et(index) <<"],[1," \" -- NonZeroes Now = \" << nonZeroElements <<"],[0," endl;\t\t\t\n\t\t"]],"start1":1945,"start2":1945,"length1":24,"length2":69},{"diffs":[[0,"\t\t\t\n"],[1,"\n"],[0,"\t\t"],[-1,"} else "],[1,"return *this;\n\t}\n\t"],[0,"if ("]],"start1":2008,"start2":2008,"length1":17,"length2":29},{"diffs":[[0,");\n\t"],[-1,"\telse {\n\t\t\tint i = 0;\n\t\t\tfor (i; i < 20; i++){\n\t\t\t\tif (valueArr[i] == 0) break; //Edge case, it's possible for indexArr[i] to hold a value while valueArr[i] does not. Therefore utilizing valueArr[i] to check for first zero occurrence to set values, this keeps arrays parallel.\n\t\t\t}\n\t\t\t//cout << \"NonZeroes - \" << nonZeroElements << \" indexArr[\" << i << \"]\" << endl; //100 000 000 000 000 000\n\t\t\tthis->indexArr[i"],[1,"this->indexArr[nonZeroElements"],[0,"] = "]],"start1":2137,"start2":2137,"length1":419,"length2":38},{"diffs":[[0," index;\n"],[-1,"\t\t"],[0,"\t//cout "]],"start1":2174,"start2":2174,"length1":18,"length2":16},{"diffs":[[0,"< endl;\n"],[-1,"\t\t"],[0,"\tthis->v"]],"start1":2200,"start2":2200,"length1":18,"length2":16},{"diffs":[[0,"\tthis->valueArr["],[-1,"i"],[1,"nonZeroElements"],[0,"] = value;\n\t\t\t//"]],"start1":2208,"start2":2208,"length1":33,"length2":47},{"diffs":[[0," value;\n"],[-1,"\t\t"],[0,"\t//cout "]],"start1":2242,"start2":2242,"length1":18,"length2":16},{"diffs":[[0,"000 002\n"],[-1,"\t\t"],[0,"\tif (get"]],"start1":2288,"start2":2288,"length1":18,"length2":16},{"diffs":[[0,"ents++;\n"],[-1,"\t\t"],[0,"\t//cout "]],"start1":2330,"start2":2330,"length1":18,"length2":16},{"diffs":[[0,"ndl;"],[-1,"\t\t\t\n\t\t}\n\t}\n\t"],[1,"\n"],[0,"\n\tre"]],"start1":2491,"start2":2491,"length1":20,"length2":9}]],"length":2513,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366856441303,"patch":[[{"diffs":[[0,"<string>"],[1," //seems sourceLair isn't picky about have this include. =\\ must remember to properly set includes and compile code in another environment."],[0,"\n"],[-1,""],[0,"using na"]],"start1":78,"start2":78,"length1":17,"length2":156},{"diffs":[[0,"ain() {\n"],[-1,"    "],[1,"\tSparseArray a;\n\t\n\tunsigned long long index = 1;\n\tfor( unsigned i = 0; i <= 20; i++, index *= 4 ){\n\t\t//cout << i << \" - \" << index << endl;\n\t\ta.set( index, i );\n\t}\n/*\t\n\tcout << a.get(1099511627776) << endl << endl;\n/* */\t\n\tunsigned total = 0;\n\tindex = 1;\n\tfor( unsigned i = 0; i <= 40; i++, index *= 2 )\n\t\ttotal += a.get(index);\n\tcout <<total;\n/* */\n\tcout << endl << endl;\n/*\n\tint t = 0;\n\tfor(int i = 0; i <= 20; i++){\n\t\tt += i;\n\t\tcout << t << \" / \" << i << endl;\n\t}\n\t\n\tcout << endl;\n/* */\n\t//a.set(9999, 1), cout << endl << endl;\n\t\n\ta.set(64, 0).set(16777216, 0), cout << endl << endl;\n\t\n\ta.set(16, 33);\n\tcout << \"get(index) \" << a.get(16) << endl << endl;\n\t\n\ta.set(9871234, 13).set(1, 17), cout << endl << endl;\n/* */\t\n\t\n\tcout << endl;"],[0,"\n\treturn"]],"start1":679,"start2":679,"length1":20,"length2":753},{"diffs":[[0,"ak;\n\t\t}\n"],[1,"\t\tfor (i; i < 20; i++){\n\t\t\tif (i == 19){\n\t\t\t\tthis->indexArr[i] = 0, this->valueArr[i] = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis->indexArr[i] = this->indexArr[i + 1];\n\t\t\tthis->valueArr[i] = this->valueArr[i + 1];\n\t\t}\n"],[0,"\t\t//cout"]],"start1":2270,"start2":2270,"length1":16,"length2":219},{"diffs":[[0,"dl;\n"],[-1,"\t\tthis->indexArr[i] = 0;\n\t\tthis->valueArr[i] = 0;\n"],[0,"\t\tif"]],"start1":2536,"start2":2536,"length1":58,"length2":8},{"diffs":[[0," -- get("],[-1,"index"],[1,"\" << index << \""],[0,") return"]],"start1":3465,"start2":3465,"length1":21,"length2":31}]],"length":3548,"saved":false}
