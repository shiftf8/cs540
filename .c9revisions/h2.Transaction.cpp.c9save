{"ts":1364272964153,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//h2.Transaction\n//Hart\n//04/11/13\n\n#include <cmath>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Transaction{\n    public:\n\t\tTransaction( unsigned doughnuts, unsigned carburetors = 0, unsigned racquets = 0 );\n\t\tunsigned getDoughnuts() const;  // return the number of doughnuts purchased in this transaction\n\t\tunsigned getCarburetors() const;  // return the number of carburetors purchased in this transaction\n\t\tunsigned getRacquets() const;  // return the number of racquets purchased in this transcation\n\t\tdouble getSubtotal() const;  // return the total cost of this purchase, excluding sales tax\n\t\tdouble getTotal() const;  // return the total cost of this purchase, including sales tax\n\t\n\tprivate:\n\t\tstatic const double eachDoughnut = .4;\n\t\tstatic const double eachCarburetor = 200;\n\t\tstatic const double eachRacquet = 75;\n\t\tstatic const double salesTax = 1.09;\n\t\n\t\tunsigned doughnuts;\n\t\tunsigned carburetors;\n\t\tunsigned racquets;\n\t\tdouble subtotal;\n\t\tdouble total;\n}; // class Transaction\n\nvoid report( const Transaction transaction[], unsigned elements );\n\nint main(){\n\tTransaction mon(1, 1, 1);\n\tcout << mon.getSubtotal() << endl;\n\tcout << mon.getTotal() << endl;\n\tcout << \"]===[\" << endl;\n\n\tTransaction march[] = {Transaction(1, 2, 3), Transaction(10, 1), Transaction(12), Transaction(0, 2, 5)};\n/*\tcout << march[0].getSubtotal() << endl;\n\tcout << march[1].getSubtotal() << endl;\n\tcout << march[2].getSubtotal() << endl;\n\tcout << march[3].getSubtotal() << endl;\n\tcout << march[0].getSubtotal() + march[1].getSubtotal() + march[2].getSubtotal() + march[3].getSubtotal() << endl;\n*/\n\treport( march, 4);\n\tcout << \"]===[\" << endl;\n\n\treturn 0;\n}\n\nTransaction::Transaction( unsigned doughnuts, unsigned carburetors, unsigned racquets ){\n\tthis->doughnuts = doughnuts;\n\tthis->carburetors = carburetors;\n\tthis->racquets = racquets;\n}\n\nunsigned Transaction::getDoughnuts() const{\n\treturn doughnuts;\n}\n\nunsigned Transaction::getCarburetors() const{\n\treturn carburetors;\n}\n\nunsigned Transaction::getRacquets() const{\n\treturn racquets;\n}\n\ndouble Transaction::getSubtotal() const{\n\treturn (getDoughnuts() * eachDoughnut) + (getCarburetors() * eachCarburetor) + (getRacquets() * eachRacquet);\n}\n\ndouble Transaction::getTotal() const{\n\treturn (getDoughnuts() * eachDoughnut * salesTax) + (getCarburetors() * eachCarburetor * salesTax) + (getRacquets() * eachRacquet);\n}\n\nvoid report( const Transaction transaction[], unsigned elements ){\n\tunsigned reportDoughnuts = 0;\n\tunsigned reportCarburetors = 0;\n\tunsigned reportRacquets = 0;\n\tdouble reportSubtotal = 0;\n\tdouble reportTotal = 0;\n\t\t\n\tfor (int i = 0; i < elements; i++){\n\t\treportDoughnuts += transaction[i].getDoughnuts();\n\t\treportCarburetors += transaction[i].getCarburetors();\n\t\treportRacquets += transaction[i].getRacquets();\n\t\treportSubtotal += transaction[i].getSubtotal();\n\t\treportTotal += transaction[i].getTotal();\n\t}\n\t\n\tcout << \"doughnuts: \" << reportDoughnuts << endl\n\t\t<< \"carburetors: \" << reportCarburetors << endl\n\t\t<< \"racquets: \" << reportRacquets << endl\n\t\t<< \"$ without tax: $\" << reportSubtotal << endl\n\t\t<< \"$ with tax: $\" << reportTotal << endl;\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3149}]],"length":3149}
