{"ts":1367021455785,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1367021501910,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//Hart\n//Practice Test h2.Point\n//April 25, 2013\n\n#include <cmath>\n#include <iostream>\n#include <string>\nusing namespace std;\n\nbool die( const string & msg );\n\nclass Point{\n    public:\n\t\tPoint( double x = 0, double y = 0 );\n\t\tdouble getX() const;\n\t\tdouble getY() const;\n\t\tPoint & setX( double x );    //  mutator, returning reference to self\n\t\tPoint & setY( double y );\n\t\tconst Point & output() const;\n\t\tdouble distance( const Point & other ) const;\n\t\n\tprivate:\n\t\tdouble x;\n\t\tdouble y;\n}; //must remember syntax for classes!!!! forgot semi-colon and compiler complained\n\ndouble area( const Point & a, const Point & b, const Point & c );\ndouble maxArea(const Point a[], unsigned elements);\n\nint main() {\n\tPoint a;\n\ta.output();\n\tcout << endl;\n\t\n\tPoint b(4, 0);\n\tcout << a.distance(b) << endl;\n\tcout << endl;\n\t\n\tPoint c(0, 3);\n\tcout << area(a, b, c) << endl;\n\tcout << endl;\n\t\n\tPoint setOfPoints[10] = {\n\t\tPoint(0, 0),\n\t\tPoint(-1, 5),\n\t\tPoint(-1, -5),\n\t\t//Point(5, 0),\n\t\tPoint(0, 5),\n\t\tPoint(-1, -5),\n\t\tPoint(10, 10),\n\t\tPoint(2, 3),\n\t\tPoint(4, 4),\n\t\tPoint(11, 11)\n\t};\n\tcout << maxArea(setOfPoints, 10) << endl;\n//\tcout << endl;\n//\tcout << area(setOfPoints[1], setOfPoints[2], setOfPoints[3]) << endl;\n\t\n\tcout << endl;\n\t//system(\"pause\");\n\treturn 0;\n}\n\nbool die( const string & msg ){\n\t//cerr <<\"Fatal error: \" <<msg << endl;\n\t//exit( EXIT_FAILURE );\n\t\n\tcout <<\"Fatal error: \" << msg << endl;\n}\n\nPoint::Point(double x, double y){\n\tsetX(x);\n\tsetY(y);\n}\n\ndouble Point::getX() const{\n\treturn this->x;\n}\n\ndouble Point::getY() const{\n\treturn this->y;\n}\n\nPoint & Point::setX( double x ){\n\tthis->x = x;\n\treturn *this;\n}\n\nPoint & Point::setY( double y ){\n\tthis->y = y;\n\treturn *this;\n}\n\nconst Point & Point::output() const{\n\tcout << \"(\" << getX() << \", \" << getY() << \")\" << endl;\n\treturn *this;\n}\n\ndouble Point::distance( const Point & other ) const{\n\treturn sqrt(pow(abs(this->x - other.getX()), 2) + pow(abs(this->y - other.getY()), 2));\n}\n\ndouble area( const Point & a, const Point & b, const Point & c ){ //special area function. returns 0 if the three points lie in a straight line.\n\tdouble s; //triangle perimeter\n\t\n\tif (((b.getY() - a.getY()) / (b.getX() - a.getX())) != ((c.getY() - b.getY()) / (c.getX() - b.getX()))){\n\t\ts = (a.distance(b) + b.distance(c) + c.distance(a)) / 2;\n\t\t//cout << \"(\" << a.distance(b) << \" + \" << b.distance(c) << \" + \" << c.distance(a) << \") / 2 = \" << perimeter << endl;\n\t\treturn sqrt(s * (s - a.distance(b)) * (s - b.distance(c)) * (s - c.distance(a))); //Heron's formula\n\t} else {\n\t\t//cout << \"These three points lie in a straight line\" << endl;\n\t\treturn 0;\n\t}\n}\n\ndouble maxArea(const Point a[], unsigned elements){\n\tdouble greatestArea = 0;\n\tdouble temp;\n\t\n\tfor (unsigned i = 0; i < elements - 1; i++){\n\t\tfor(unsigned j = 0; j < elements; j++){\n\t\t\ttemp = area(a[i], a[i + 1], a[j]);\n\t\t\tif (temp > greatestArea) greatestArea = temp;\n\t\t\t//cout << j << \", \" << temp << \" / \" << greatestArea << \" -- temp / greatestArea\" << endl;\n\t\t\t//if (j == elements) cout << endl;\n\t\t}\n\t\t//cout << temp << \" / \" << greatestArea << \" -- temp / greatestArea\" << endl;\n\t\t//cout << endl;\n\t}\n\t\n\treturn greatestArea;\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3136}]],"length":3136,"saved":false}
