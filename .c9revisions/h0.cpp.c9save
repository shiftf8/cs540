{"ts":1361878949524,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"//Lamog, Rob\n//h0\n//Hart\n//02/24/13\n\n#include <cctype>\n#include <iostream>\n#include <sstream>\n#include <string>\nusing namespace std;\n\nbool die( const string & msg );\nvoid input( unsigned a[], unsigned elements );\nbool isNumber(const string &userInput); //my own function\nvoid output( const unsigned a[], unsigned elements );\nunsigned howMany( const unsigned a[], unsigned elements, unsigned min, unsigned max );\nbool allSame( const unsigned a[], unsigned elements );\nbool allDifferent( const unsigned a[], unsigned elements );\nunsigned changes( const unsigned a[], unsigned elements );\nvoid f( unsigned result[], const unsigned data[], unsigned dataElements, const unsigned index[], unsigned indexElements );\nunsigned g( const unsigned a[], unsigned elements );\n\nint main() {\n    \tunsigned a[3];\n\t\tunsigned b[20] = {3, 5, 10, 9, 50, 100, 1000, 14, 15};\n\t\tunsigned r[20];\n\t\tconst unsigned d[] = {1000, 3000, 5000, 3000, 8888};\n\t\tconst unsigned i[] = {2, 0, 2, 3, 4, 0};\n\t\tconst unsigned x[] = {10, 10, 8, 8, 5, 5, 5, 5, 3};\n\t\tconst unsigned y[] = {5, 4, 5, 5};\n\t\tconst unsigned z[] = {10, 9, 2};\n\n\t\tinput(a, 3);\n\t\toutput(a, 3);\n\t\toutput(b, 3);\n\t\tcout << \"howMany: \" << howMany(b, 3, 1, 13) << endl;\n\t\tcout << \"allSame: \" << allSame(b, 3) << endl;\n\t\tcout << \"allDifferent: \" << allDifferent(a, 3) << endl;\n\t\tcout << \"changes: \" << changes( b, 8 ) << endl;\n\t\tf( r, d, 5, i, 6 );\n\t\tcout << \"array code: \" << g(x, 9) << endl;\n\t\tcout << \"array code: \" << g(y, 4) << endl;\n\t\tcout << \"array code: \" << g(z, 1) << endl;\n\t\t\n\t\tcout << endl;\n\t\treturn 0;\n}\n\nbool die( const string & msg ){\n\t\t//cerr <<endl <<\"Fatal error: \" <<msg <<endl;\n\t\t//exit( EXIT_FAILURE );\n\t\t\n\t\tcout << endl << \"Fatal error: \" << msg << endl;\n}\n\nvoid input( unsigned a[], unsigned elements ){\n\t\tstring inputStr;\n\t\tstring nan = \"NAN entered.\";\n\t\tint userInt;\n\t\t\n\t\tfor (int i = 0; i < elements; i++){\n\t\t\t\tcout << \"[\" << i << \"]: \";\n\t\t\t\t//cin >> a[i];\n\t\t\t\tgetline (cin, inputStr);\n\t\t\t\t\n\t\t\t\t/* \\\\Test code\n\t\t\t\tint x = isNumber(inputStr);\n\t\t\t\tcout << inputStr << \" / \" << x << endl;\n\t\t\t\t*/\n\t\t\t\t\n\t\t\t\tif (isNumber(inputStr)) {\n\t\t\t\t\t\tstringstream(inputStr) >> userInt;\n\t\t\t\t\t\ta[i] = userInt;\n\t\t\t\t}\telse die(nan);\n\t\t\t\t\n\t\t\t\t//cout << userInt;\n\t\t\t\tcout << endl;\n\t\t}\n\t\t\n\t\t/* \\\\Test code\n\t\tcout << \"{\";\n\t\tfor (int j = 0; j < elements; j++){\n\t\t\t\tcout << a[j];\n\t\t\t\tif (j == elements - 1) cout << \"}\" << endl;\n\t\t\t\telse cout << \", \";\n\t\t}\n\t\t*/\n}\n\nbool isNumber(const string &userInput){\n\t\tbool isNum;\n\t\t\n\t\tfor (int i = 0; i < userInput.length(); i++){\n\t\t\t\tif (isdigit(userInput[i])) isNum = 1;\n\t\t\t\telse {\n\t\t\t\t\t\tisNum = 0;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t}\n\t\treturn isNum;\n}\n\nvoid output( const unsigned a[], unsigned elements ){\n\t\tfor (int i = 0; i < elements; i++){\n\t\t\t\tcout << a[i];\n\t\t\t\tif (i == elements - 1) cout << endl;\n\t\t\t\telse cout << \", \";\n\t\t}\t\t\n}\n\nunsigned howMany( const unsigned a[], unsigned elements, unsigned min, unsigned max ){\n\t\tint count = 0;\n\t\t\n\t\tfor (int i = 0; i < elements; i++){\n\t\t\t\tif ((a[i] >= min) && (a[i] <= max)) count++;\n\t\t}\n\t\treturn count;\n}\n\nbool allSame( const unsigned a[], unsigned elements ){\n\t\tint count = 0;\n\t\t\n\t\tfor (int i = 0; i < elements; i++){\n\t\t\t\t//cout << a[i] << \" / \" << a[elements - 1] << endl;\n\t\t\t\tif (a[i] == a[elements - 1]) count++;\n\t\t}\n\t\treturn count == elements ? 1 : 0;\n}\n\nbool allDifferent( const unsigned a[], unsigned elements ){\n\t\tint count = 0;\n\t\t\n\t\tfor (int i = 0; i < elements; i++){\n\t\t\t\tfor (int j = 0; j < elements; j++){\n\t\t\t\t\t\tif (a[i] == a[j]) count++;\n\t\t\t\t}\n\t\t}\n\t\treturn count == elements ? 1 : 0;\n}\n\nunsigned changes( const unsigned a[], unsigned elements ){\n\t\tint count = 0;\n\t\tbool isIncreasing, holdState = 0;\n\t\t\n\t\tif (a[0] < a[1]){\n\t\t\t\tisIncreasing = 1;\n\t\t\t\tholdState = 1;\n\t\t}\n\t\t\n\t\tfor (int i = 0; i < elements - 1; i++){\n\t\t\t\tif (a[i] > a[i + 1]){\n\t\t\t\t\t\tisIncreasing = 0;\n\t\t\t\t\t\tif (holdState != isIncreasing){\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\tholdState = isIncreasing;\n\t\t\t\t\t\t\t\t//cout << holdState << endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//cout << isIncreasing;\n\t\t\t\t}\n\t\t\t\tif (a[i] < a[i + 1]){\n\t\t\t\t\t\tisIncreasing = 1;\n\t\t\t\t\t\tif (holdState != isIncreasing){\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t\tholdState = isIncreasing;\n\t\t\t\t\t\t\t\t//cout << holdState << endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//cout << isIncreasing;\n\t\t\t\t}\n\t\t}\n\t\t//cout << endl;\n\t\treturn count;\n}\n\nvoid f( unsigned result[], const unsigned data[], unsigned dataElements, const unsigned index[], unsigned indexElements ){\n\t\tint maxIndexElement = 0;\n\t\tstring oor = \"Index elements out of range.\";\n\t\t\n\t\tfor (int i = 0; i < indexElements; i++){\n\t\t\t\tif (index[i] > maxIndexElement) maxIndexElement = index[i];\n\t\t}\n\t\t\n\t\tif (maxIndexElement >= dataElements) die(oor);\n\t\telse {\n\t\t\t\tfor (int j = 0; j < indexElements; j++){\n\t\t\t\t\t\tresult[j] = data[index[j]];\n\t\t\t\t\t\t//cout << result[j] << \" \";\n\t\t\t\t}\n\t\t}\n}\n\nunsigned g( const unsigned a[], unsigned elements ){\n\t\tif (elements < 2) return 0;\n\t\tif (elements >= 2){\n\t\t\t\tint countChangedState = 0;\n\t\t\t\tint countEqualState = 0;\n\t\t\t\tint countGreaterThanState = 0;\n\t\t\t\tint countLessThanState = 0;\n\t\t\t\tbool isGreaterThan = false;\n\t\t\t\tbool isEqual = false;\n\t\t\t\tbool greaterThanState = false;\n\n//\t\t\t\tcout << \"before loop: \" << countChangedState << endl;\n\t\t\t\n\t\t\t\tif (a[0] > a[1]){\n\t\t\t\t\t\tisGreaterThan = true;\n\t\t\t\t\t\tgreaterThanState = true;\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tfor (int i = 0; i < elements - 1; i++){\n\t\t\t\t\t\tif (a[i] > a[i + 1]){\n\t\t\t\t\t\t\t\tisGreaterThan = true;\n\t\t\t\t\t\t\t\tcountGreaterThanState++;\n\t\t\t\t\t\t\t\tif (greaterThanState != isGreaterThan){\n\t\t\t\t\t\t\t\t\t\tcountChangedState++;\n\t\t\t\t\t\t\t\t\t\tgreaterThanState = isGreaterThan;\n\t\t\t\t\t\t\t\t\t\t//cout << \"greater\" << endl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n//\t\t\t\tcout << \"inside loop: \" << countChangedState << \" / spin: \" << i + 1 << endl;\n\t\t\t\t\t\tif (a[i] == a[i + 1]){\n\t\t\t\t\t\t\t\tisEqual = true;\n\t\t\t\t\t\t\t\tcountEqualState++;\n\t\t\t\t\t\t\t\t//cout << \"equal\" << endl;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a[i] < a[i + 1]){\n\t\t\t\t\t\t\t\tisGreaterThan = false;\n\t\t\t\t\t\t\t\tcountLessThanState++;\n\t\t\t\t\t\t\t\tif (greaterThanState != isGreaterThan){\n\t\t\t\t\t\t\t\t\t\tcountChangedState++;\n\t\t\t\t\t\t\t\t\t\tgreaterThanState = isGreaterThan;\n\t\t\t\t\t\t\t\t\t\t//cout << \"less\" << endl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t}\n//\t\t\t\tcout << \"after loop: \" << countChangedState << endl;\n\t\t\t\tif ((isGreaterThan == 1) && (countGreaterThanState == elements - 1) && (countEqualState == 0)) return 1;\n\t\t\t\tif ((isEqual == 1) && (countEqualState == elements - 1)) return 2;\n\t\t\t\tif ((countChangedState == 1) && (countGreaterThanState > 0) && (countEqualState > 0) && (countLessThanState == 0)) return 3;\n\t\t\t\tif ((isGreaterThan == 0) && (countLessThanState == elements - 1) && (countEqualState == 0)) return 4;\n\t\t\t\tif ((countLessThanState > 0) && (countGreaterThanState > 0) && (countEqualState == 0)) return 5;\n\t\t\t\tif ((countEqualState > 0) && (countGreaterThanState == 0) && (countLessThanState > 0)) return 6;\n\t\t\t\tif ((countGreaterThanState > 0) && (countEqualState > 0) && (countLessThanState > 0)) return 7;\n\n\t\t\t\treturn 99999; //bogus return\n\t\t}\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6797}]],"length":6797}
